---
title: "Class 07: Clustering and Principal Component Analysis (PCA)"
author: "Katherine Lim (A15900881)"
format: pdf
---

# Clustering

First let's making up some data to cluster so we can et a feel for these methods and how to work with them.

We can use the `rnorm()` function to get random numbers from a normal distribution around a given `mean`.

```{r}
hist(rnorm(5000, mean = 3))
```

Let's get 30 points with a mean of 3 and another 30 points with a mean of -3.

```{r}
tmp <- c(rnorm(30, mean = 3), rnorm(30, mean = -3))
tmp
```

Put two of these together.
```{r}
x <- cbind(x = tmp, y=rev(tmp))
plot(x)
```

## K-mean clustering.

Very popluar clustering method, especially for big data sets, that we can use with the  `kmeans()` function in base R.

```{r}
km <- kmeans(x, centers = 2)
km
```

> Q. What ‘component’ of your result object details:

- cluster size?

```{r}
km$size
```

- cluster assignment/membership? 

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, 3))
x <- data.frame(x=tmp, y=rev(tmp))

plot(x)
```

- cluster center?

```{r}
km$centers
```

> Q. Plot x colored by the kmeans cluster assignment and add cluster centers as blue points.

```{r}
plot(x, col = km$cluster)
points(km$centers, col = "blue", pch = 15, cex = 3)
```

> Q. Let's cluster into 3 groups or some `x` data and make a plot.

```{r}
km <- kmeans(x, centers = 4)
plot(x, col = km$cluster)
```

# Hierarchical clustering

We can use the `hclust()` function for hierarchical clustering.

Unlike `kmeans()` where we could just pass our data as input, we need to give `hclust()` a "distance matrix". 

We will use the `dist()` function to start with.

```{r}
d <- dist(x)
hc <- hclust(d)
hc
```

```{r}
plot(hc)
```

I can now "cut" my tree with the `cutree()` to yield a cluster membership vector.

```{r}
grps <- cutree(hc, h = 8)
grps
```

You can also tell `cutree()` to cut where it yields "k" groups.

```{r}
cutree(hc, k = 8)
```

```{r}
plot(x, col = grps)
```

# Principal Component Analysis (PCA)

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
# Show the number of rows.
nrow(x)

# Show the number of columns.
ncol(x)

# Show the dimensions of the data frame.
dim(x)
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

```{r}
# Properly set row names
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

I prefer to establish row names when I read in a csv file because it is less destructive and properly sets row names from the start.

```{r}
barplot(as.matrix(x), beside = T, col = rainbow(nrow(x)))
```

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

```{r}
barplot(as.matrix(x), beside = F, col = rainbow(nrow(x)))
```

Changing beside from TRUE to FALSE results in the above plot. 

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col = rainbow(10), pch = 16)
```

If a given point lies on the diagonal for a given plot, that means the two variables are comparable. 

> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

The blue and orange plots are the main differences between N. Ireland and other countries of the UK. N. Ireland consumes less of the blue dot and more of the orange dot. 

> Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
pca <- prcomp( t(x) )
summary(pca)
```
```{r}
attributes(pca)
```

```{r}
plot(pca$x[, 1], pca$x[, 2], col = c("orange", "red", "blue", "darkgreen"), 
     xlab = "PC1", ylab = "PC2", xlim = c(-270,500))
text(pca$x[, 1], pca$x[, 2], colnames(x))
```

> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[, 1], pca$x[, 2], col = c("orange", "red", "blue", "darkgreen"), 
     xlab = "PC1", ylab = "PC2", xlim = c(-270,500))
text(pca$x[, 1], pca$x[, 2], colnames(x), col = c("orange", "red", "blue", "darkgreen"))
```


