---
title: "Class 5: Data visualization"
author: "Katherine Lim (A15900881)"
format: pdf
---

## Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package. 

To compare these let's play with the inbuilt `cars` dataset.

```{r}
head(cars)
```

To use "base" R I can simply call the `plot()` function:

```{r}
plot(cars)
```
To us the `ggplot2` package I first need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()`. Can I just call it?

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot I always need at least 3 things:

- **data** (i.e. what I want to plot)
- **aes** (i.e. the aesthetic mapping of the data to the plot I want)
- the **geoms** (i.e. how I want to plot the data)

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() + 
  geom_smooth()
```

GGplot is much more verbose than base R plots but it has a consistent layer system that I can use to make just about any plot.

Let's make a plot with a straight line fit - i.e. a linear model with no standard error shown.

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() + 
  geom_smooth(se=FALSE, method="lm")
```

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() + 
  geom_smooth(se=FALSE, method="lm") +
  labs(title="Speed vs stopping distance",
       x="Speed (MPH)",
       y="Stopping distance (feet)",
       subtitle="From the inbuilt 'cars' dataset",
       caption="Dataset used: 'cars'")
```

## A more complicated plot

Let's plot some gene expression data. 

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(genes)
```

> Q2. How can we summarize the last column - the "State" column?

```{r}
table(genes$State)
```

```{r}
p <- ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point()
```

I can call `p` when I want to plot or add to it. 

```{r}
p + labs(title="Gene expression changes upon drug treatment",
         x="Control", y="Drug treatment") +
  scale_colour_manual( values=c("blue","purple","red") )
```

## Going further

Here I'll read a slightly larger dataset.

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(url)
head(gapminder)
```

```{r}
ggplot(gapminder) +
  aes(x= gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=0.3)
```

A very useful layer to add sometimes is for facetting. 

```{r}
ggplot(gapminder) +
  aes(x= gdpPercap, y=lifeExp, col=continent, size=pop) +
  geom_point(alpha=0.3) +
  facet_wrap(~continent)
```










